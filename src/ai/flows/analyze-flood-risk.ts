// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Flood risk analysis AI agent.
 *
 * - analyzeFloodRisk - A function that handles the flood risk analysis process.
 * - AnalyzeFloodRiskInput - The input type for the analyzeFloodRisk function.
 * - AnalyzeFloodRiskOutput - The return type for the analyzeFloodRisk function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeFloodRiskInputSchema = z.object({
  area: z.string().describe('The area in Durban to analyze flood risk for.'),
  weatherData: z
    .string()
    .describe(
      'Weather data including rainfall, temperature, humidity, and wind speed.'
    ),
});

export type AnalyzeFloodRiskInput = z.infer<typeof AnalyzeFloodRiskInputSchema>;

const AnalyzeFloodRiskOutputSchema = z.object({
  floodRiskLevel: z
    .enum(['LOW', 'MEDIUM', 'HIGH'])
    .describe('The flood risk level for the specified area.'),
  explanation: z
    .string()
    .describe('An explanation of why the flood risk level was assigned.'),
  recommendedActions: z
    .string()
    .describe('Recommended actions for residents based on the flood risk.'),
});

export type AnalyzeFloodRiskOutput = z.infer<typeof AnalyzeFloodRiskOutputSchema>;

export async function analyzeFloodRisk(input: AnalyzeFloodRiskInput): Promise<AnalyzeFloodRiskOutput> {
  return analyzeFloodRiskFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeFloodRiskPrompt',
  input: {schema: AnalyzeFloodRiskInputSchema},
  output: {schema: AnalyzeFloodRiskOutputSchema},
  prompt: `You are an expert in analyzing flood risks in Durban, South Africa.

You will receive weather data for a specific area in Durban and must assess the flood risk level (LOW, MEDIUM, HIGH).
Based on the risk level, provide an explanation and recommend actions for residents.

Area: {{{area}}}
Weather Data: {{{weatherData}}}

Analyze the provided data and determine the flood risk level, explain your reasoning, and suggest actions for residents.

Ensure the output is formatted as:
{
  "floodRiskLevel": "(LOW, MEDIUM, or HIGH)",
  "explanation": "Explanation of the risk level",
  "recommendedActions": "Recommended actions for residents"
}`,
});

const analyzeFloodRiskFlow = ai.defineFlow(
  {
    name: 'analyzeFloodRiskFlow',
    inputSchema: AnalyzeFloodRiskInputSchema,
    outputSchema: AnalyzeFloodRiskOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
